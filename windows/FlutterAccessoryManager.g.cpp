// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "FlutterAccessoryManager.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_accessory_manager {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// BluetoothDevice

BluetoothDevice::BluetoothDevice(
  const std::string& address,
  bool paired,
  int64_t rssi)
 : address_(address),
    paired_(paired),
    rssi_(rssi) {}

BluetoothDevice::BluetoothDevice(
  const std::string& address,
  const std::string* name,
  bool paired,
  int64_t rssi)
 : address_(address),
    name_(name ? std::optional<std::string>(*name) : std::nullopt),
    paired_(paired),
    rssi_(rssi) {}

const std::string& BluetoothDevice::address() const {
  return address_;
}

void BluetoothDevice::set_address(std::string_view value_arg) {
  address_ = value_arg;
}


const std::string* BluetoothDevice::name() const {
  return name_ ? &(*name_) : nullptr;
}

void BluetoothDevice::set_name(const std::string_view* value_arg) {
  name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void BluetoothDevice::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


bool BluetoothDevice::paired() const {
  return paired_;
}

void BluetoothDevice::set_paired(bool value_arg) {
  paired_ = value_arg;
}


int64_t BluetoothDevice::rssi() const {
  return rssi_;
}

void BluetoothDevice::set_rssi(int64_t value_arg) {
  rssi_ = value_arg;
}


EncodableList BluetoothDevice::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(address_));
  list.push_back(name_ ? EncodableValue(*name_) : EncodableValue());
  list.push_back(EncodableValue(paired_));
  list.push_back(EncodableValue(rssi_));
  return list;
}

BluetoothDevice BluetoothDevice::FromEncodableList(const EncodableList& list) {
  BluetoothDevice decoded(
    std::get<std::string>(list[0]),
    std::get<bool>(list[2]),
    std::get<int64_t>(list[3]));
  auto& encodable_name = list[1];
  if (!encodable_name.IsNull()) {
    decoded.set_name(std::get<std::string>(encodable_name));
  }
  return decoded;
}

// SdpConfig

SdpConfig::SdpConfig() {}

SdpConfig::SdpConfig(
  const MacSdpConfig* mac_sdp_config,
  const AndroidSdpConfig* android_sdp_config)
 : mac_sdp_config_(mac_sdp_config ? std::make_unique<MacSdpConfig>(*mac_sdp_config) : nullptr),
    android_sdp_config_(android_sdp_config ? std::make_unique<AndroidSdpConfig>(*android_sdp_config) : nullptr) {}

SdpConfig::SdpConfig(const SdpConfig& other)
 : mac_sdp_config_(other.mac_sdp_config_ ? std::make_unique<MacSdpConfig>(*other.mac_sdp_config_) : nullptr),
    android_sdp_config_(other.android_sdp_config_ ? std::make_unique<AndroidSdpConfig>(*other.android_sdp_config_) : nullptr) {}

SdpConfig& SdpConfig::operator=(const SdpConfig& other) {
  mac_sdp_config_ = other.mac_sdp_config_ ? std::make_unique<MacSdpConfig>(*other.mac_sdp_config_) : nullptr;
  android_sdp_config_ = other.android_sdp_config_ ? std::make_unique<AndroidSdpConfig>(*other.android_sdp_config_) : nullptr;
  return *this;
}

const MacSdpConfig* SdpConfig::mac_sdp_config() const {
  return mac_sdp_config_.get();
}

void SdpConfig::set_mac_sdp_config(const MacSdpConfig* value_arg) {
  mac_sdp_config_ = value_arg ? std::make_unique<MacSdpConfig>(*value_arg) : nullptr;
}

void SdpConfig::set_mac_sdp_config(const MacSdpConfig& value_arg) {
  mac_sdp_config_ = std::make_unique<MacSdpConfig>(value_arg);
}


const AndroidSdpConfig* SdpConfig::android_sdp_config() const {
  return android_sdp_config_.get();
}

void SdpConfig::set_android_sdp_config(const AndroidSdpConfig* value_arg) {
  android_sdp_config_ = value_arg ? std::make_unique<AndroidSdpConfig>(*value_arg) : nullptr;
}

void SdpConfig::set_android_sdp_config(const AndroidSdpConfig& value_arg) {
  android_sdp_config_ = std::make_unique<AndroidSdpConfig>(value_arg);
}


EncodableList SdpConfig::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(mac_sdp_config_ ? CustomEncodableValue(*mac_sdp_config_) : EncodableValue());
  list.push_back(android_sdp_config_ ? CustomEncodableValue(*android_sdp_config_) : EncodableValue());
  return list;
}

SdpConfig SdpConfig::FromEncodableList(const EncodableList& list) {
  SdpConfig decoded;
  auto& encodable_mac_sdp_config = list[0];
  if (!encodable_mac_sdp_config.IsNull()) {
    decoded.set_mac_sdp_config(std::any_cast<const MacSdpConfig&>(std::get<CustomEncodableValue>(encodable_mac_sdp_config)));
  }
  auto& encodable_android_sdp_config = list[1];
  if (!encodable_android_sdp_config.IsNull()) {
    decoded.set_android_sdp_config(std::any_cast<const AndroidSdpConfig&>(std::get<CustomEncodableValue>(encodable_android_sdp_config)));
  }
  return decoded;
}

// MacSdpConfig

MacSdpConfig::MacSdpConfig() {}

MacSdpConfig::MacSdpConfig(
  const std::string* sdp_plist_file,
  const EncodableMap* data)
 : sdp_plist_file_(sdp_plist_file ? std::optional<std::string>(*sdp_plist_file) : std::nullopt),
    data_(data ? std::optional<EncodableMap>(*data) : std::nullopt) {}

const std::string* MacSdpConfig::sdp_plist_file() const {
  return sdp_plist_file_ ? &(*sdp_plist_file_) : nullptr;
}

void MacSdpConfig::set_sdp_plist_file(const std::string_view* value_arg) {
  sdp_plist_file_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void MacSdpConfig::set_sdp_plist_file(std::string_view value_arg) {
  sdp_plist_file_ = value_arg;
}


const EncodableMap* MacSdpConfig::data() const {
  return data_ ? &(*data_) : nullptr;
}

void MacSdpConfig::set_data(const EncodableMap* value_arg) {
  data_ = value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void MacSdpConfig::set_data(const EncodableMap& value_arg) {
  data_ = value_arg;
}


EncodableList MacSdpConfig::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(sdp_plist_file_ ? EncodableValue(*sdp_plist_file_) : EncodableValue());
  list.push_back(data_ ? EncodableValue(*data_) : EncodableValue());
  return list;
}

MacSdpConfig MacSdpConfig::FromEncodableList(const EncodableList& list) {
  MacSdpConfig decoded;
  auto& encodable_sdp_plist_file = list[0];
  if (!encodable_sdp_plist_file.IsNull()) {
    decoded.set_sdp_plist_file(std::get<std::string>(encodable_sdp_plist_file));
  }
  auto& encodable_data = list[1];
  if (!encodable_data.IsNull()) {
    decoded.set_data(std::get<EncodableMap>(encodable_data));
  }
  return decoded;
}

// AndroidSdpConfig

AndroidSdpConfig::AndroidSdpConfig(
  const std::string& name,
  const std::string& description,
  const std::string& provider,
  int64_t subclass,
  const std::vector<uint8_t>& descriptors)
 : name_(name),
    description_(description),
    provider_(provider),
    subclass_(subclass),
    descriptors_(descriptors) {}

const std::string& AndroidSdpConfig::name() const {
  return name_;
}

void AndroidSdpConfig::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


const std::string& AndroidSdpConfig::description() const {
  return description_;
}

void AndroidSdpConfig::set_description(std::string_view value_arg) {
  description_ = value_arg;
}


const std::string& AndroidSdpConfig::provider() const {
  return provider_;
}

void AndroidSdpConfig::set_provider(std::string_view value_arg) {
  provider_ = value_arg;
}


int64_t AndroidSdpConfig::subclass() const {
  return subclass_;
}

void AndroidSdpConfig::set_subclass(int64_t value_arg) {
  subclass_ = value_arg;
}


const std::vector<uint8_t>& AndroidSdpConfig::descriptors() const {
  return descriptors_;
}

void AndroidSdpConfig::set_descriptors(const std::vector<uint8_t>& value_arg) {
  descriptors_ = value_arg;
}


EncodableList AndroidSdpConfig::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(name_));
  list.push_back(EncodableValue(description_));
  list.push_back(EncodableValue(provider_));
  list.push_back(EncodableValue(subclass_));
  list.push_back(EncodableValue(descriptors_));
  return list;
}

AndroidSdpConfig AndroidSdpConfig::FromEncodableList(const EncodableList& list) {
  AndroidSdpConfig decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<int64_t>(list[3]),
    std::get<std::vector<uint8_t>>(list[4]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        return CustomEncodableValue(BluetoothDevice::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 130: {
        return CustomEncodableValue(SdpConfig::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(MacSdpConfig::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(AndroidSdpConfig::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BluetoothDevice)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<BluetoothDevice>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(SdpConfig)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<SdpConfig>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MacSdpConfig)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<MacSdpConfig>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AndroidSdpConfig)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<AndroidSdpConfig>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by FlutterAccessoryPlatformChannel.
const flutter::StandardMessageCodec& FlutterAccessoryPlatformChannel::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `FlutterAccessoryPlatformChannel` to handle messages through the `binary_messenger`.
void FlutterAccessoryPlatformChannel::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FlutterAccessoryPlatformChannel* api) {
  FlutterAccessoryPlatformChannel::SetUp(binary_messenger, api, "");
}

void FlutterAccessoryPlatformChannel::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FlutterAccessoryPlatformChannel* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_with_names_arg = args.at(0);
          if (encodable_with_names_arg.IsNull()) {
            reply(WrapError("with_names_arg unexpectedly null."));
            return;
          }
          const auto& with_names_arg = std::get<EncodableList>(encodable_with_names_arg);
          api->ShowBluetoothAccessoryPicker(with_names_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.connect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_device_id_arg = args.at(0);
          if (encodable_device_id_arg.IsNull()) {
            reply(WrapError("device_id_arg unexpectedly null."));
            return;
          }
          const auto& device_id_arg = std::get<std::string>(encodable_device_id_arg);
          api->Connect(device_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.disconnect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_device_id_arg = args.at(0);
          if (encodable_device_id_arg.IsNull()) {
            reply(WrapError("device_id_arg unexpectedly null."));
            return;
          }
          const auto& device_id_arg = std::get<std::string>(encodable_device_id_arg);
          api->Disconnect(device_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.setupSdp" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_config_arg = args.at(0);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const SdpConfig&>(std::get<CustomEncodableValue>(encodable_config_arg));
          std::optional<FlutterError> output = api->SetupSdp(config_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.sendReport" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_device_id_arg = args.at(0);
          if (encodable_device_id_arg.IsNull()) {
            reply(WrapError("device_id_arg unexpectedly null."));
            return;
          }
          const auto& device_id_arg = std::get<std::string>(encodable_device_id_arg);
          const auto& encodable_data_arg = args.at(1);
          if (encodable_data_arg.IsNull()) {
            reply(WrapError("data_arg unexpectedly null."));
            return;
          }
          const auto& data_arg = std::get<std::vector<uint8_t>>(encodable_data_arg);
          std::optional<FlutterError> output = api->SendReport(device_id_arg, data_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.startScan" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->StartScan();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.stopScan" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->StopScan();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.isScanning" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<bool> output = api->IsScanning();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.getPairedDevices" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<EncodableList> output = api->GetPairedDevices();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.pair" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_arg = args.at(0);
          if (encodable_address_arg.IsNull()) {
            reply(WrapError("address_arg unexpectedly null."));
            return;
          }
          const auto& address_arg = std::get<std::string>(encodable_address_arg);
          api->Pair(address_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue FlutterAccessoryPlatformChannel::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FlutterAccessoryPlatformChannel::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
FlutterAccessoryCallbackChannel::FlutterAccessoryCallbackChannel(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

FlutterAccessoryCallbackChannel::FlutterAccessoryCallbackChannel(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& FlutterAccessoryCallbackChannel::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

void FlutterAccessoryCallbackChannel::OnDeviceDiscover(
  const BluetoothDevice& device_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.onDeviceDiscover" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(device_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void FlutterAccessoryCallbackChannel::OnDeviceRemoved(
  const BluetoothDevice& device_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.onDeviceRemoved" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(device_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace flutter_accessory_manager
