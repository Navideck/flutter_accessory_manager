// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_FLUTTERACCESSORYMANAGER_G_H_
#define PIGEON_FLUTTERACCESSORYMANAGER_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_accessory_manager {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FlutterAccessoryPlatformChannel;
  friend class FlutterAccessoryCallbackChannel;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};



// Generated class from Pigeon that represents data sent in messages.
class BluetoothDevice {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit BluetoothDevice(
    const std::string& address,
    bool paired,
    int64_t rssi);

  // Constructs an object setting all fields.
  explicit BluetoothDevice(
    const std::string& address,
    const std::string* name,
    bool paired,
    int64_t rssi);

  const std::string& address() const;
  void set_address(std::string_view value_arg);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  bool paired() const;
  void set_paired(bool value_arg);

  int64_t rssi() const;
  void set_rssi(int64_t value_arg);


 private:
  static BluetoothDevice FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FlutterAccessoryPlatformChannel;
  friend class FlutterAccessoryCallbackChannel;
  friend class PigeonInternalCodecSerializer;
  std::string address_;
  std::optional<std::string> name_;
  bool paired_;
  int64_t rssi_;

};


// Generated class from Pigeon that represents data sent in messages.
class SdpConfig {
 public:
  // Constructs an object setting all non-nullable fields.
  SdpConfig();

  // Constructs an object setting all fields.
  explicit SdpConfig(
    const MacSdpConfig* mac_sdp_config,
    const AndroidSdpConfig* android_sdp_config);

  ~SdpConfig() = default;
  SdpConfig(const SdpConfig& other);
  SdpConfig& operator=(const SdpConfig& other);
  SdpConfig(SdpConfig&& other) = default;
  SdpConfig& operator=(SdpConfig&& other) noexcept = default;
  const MacSdpConfig* mac_sdp_config() const;
  void set_mac_sdp_config(const MacSdpConfig* value_arg);
  void set_mac_sdp_config(const MacSdpConfig& value_arg);

  const AndroidSdpConfig* android_sdp_config() const;
  void set_android_sdp_config(const AndroidSdpConfig* value_arg);
  void set_android_sdp_config(const AndroidSdpConfig& value_arg);


 private:
  static SdpConfig FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FlutterAccessoryPlatformChannel;
  friend class FlutterAccessoryCallbackChannel;
  friend class PigeonInternalCodecSerializer;
  std::unique_ptr<MacSdpConfig> mac_sdp_config_;
  std::unique_ptr<AndroidSdpConfig> android_sdp_config_;

};


// Generated class from Pigeon that represents data sent in messages.
class MacSdpConfig {
 public:
  // Constructs an object setting all non-nullable fields.
  MacSdpConfig();

  // Constructs an object setting all fields.
  explicit MacSdpConfig(
    const std::string* sdp_plist_file,
    const flutter::EncodableMap* data);

  const std::string* sdp_plist_file() const;
  void set_sdp_plist_file(const std::string_view* value_arg);
  void set_sdp_plist_file(std::string_view value_arg);

  const flutter::EncodableMap* data() const;
  void set_data(const flutter::EncodableMap* value_arg);
  void set_data(const flutter::EncodableMap& value_arg);


 private:
  static MacSdpConfig FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SdpConfig;
  friend class FlutterAccessoryPlatformChannel;
  friend class FlutterAccessoryCallbackChannel;
  friend class PigeonInternalCodecSerializer;
  std::optional<std::string> sdp_plist_file_;
  std::optional<flutter::EncodableMap> data_;

};


// Generated class from Pigeon that represents data sent in messages.
class AndroidSdpConfig {
 public:
  // Constructs an object setting all fields.
  explicit AndroidSdpConfig(const flutter::EncodableMap& data);

  const flutter::EncodableMap& data() const;
  void set_data(const flutter::EncodableMap& value_arg);


 private:
  static AndroidSdpConfig FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SdpConfig;
  friend class FlutterAccessoryPlatformChannel;
  friend class FlutterAccessoryCallbackChannel;
  friend class PigeonInternalCodecSerializer;
  flutter::EncodableMap data_;

};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Flutter -> Native
//
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class FlutterAccessoryPlatformChannel {
 public:
  FlutterAccessoryPlatformChannel(const FlutterAccessoryPlatformChannel&) = delete;
  FlutterAccessoryPlatformChannel& operator=(const FlutterAccessoryPlatformChannel&) = delete;
  virtual ~FlutterAccessoryPlatformChannel() {}
  virtual void ShowBluetoothAccessoryPicker(
    const flutter::EncodableList& with_names,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Connect(
    const std::string& device_id,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Disconnect(
    const std::string& device_id,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual std::optional<FlutterError> SetupSdp(const SdpConfig& config) = 0;
  virtual std::optional<FlutterError> SendReport(
    const std::string& device_id,
    const std::vector<uint8_t>& data) = 0;
  virtual std::optional<FlutterError> StartScan() = 0;
  virtual std::optional<FlutterError> StopScan() = 0;
  virtual ErrorOr<bool> IsScanning() = 0;
  virtual ErrorOr<flutter::EncodableList> GetPairedDevices() = 0;
  virtual void Pair(
    const std::string& address,
    std::function<void(ErrorOr<bool> reply)> result) = 0;

  // The codec used by FlutterAccessoryPlatformChannel.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FlutterAccessoryPlatformChannel` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FlutterAccessoryPlatformChannel* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FlutterAccessoryPlatformChannel* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  FlutterAccessoryPlatformChannel() = default;

};
// Native -> Flutter
//
// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class FlutterAccessoryCallbackChannel {
 public:
  FlutterAccessoryCallbackChannel(flutter::BinaryMessenger* binary_messenger);
  FlutterAccessoryCallbackChannel(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void OnDeviceDiscover(
    const BluetoothDevice& device,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnDeviceRemoved(
    const BluetoothDevice& device,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);

 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

}  // namespace flutter_accessory_manager
#endif  // PIGEON_FLUTTERACCESSORYMANAGER_G_H_
