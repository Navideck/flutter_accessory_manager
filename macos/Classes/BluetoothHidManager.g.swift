// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct SdpConfig {
  var macSdpConfig: MacSdpConfig? = nil
  var androidSdpConfig: AndroidSdpConfig? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SdpConfig? {
    let macSdpConfig: MacSdpConfig? = nilOrValue(pigeonVar_list[0])
    let androidSdpConfig: AndroidSdpConfig? = nilOrValue(pigeonVar_list[1])

    return SdpConfig(
      macSdpConfig: macSdpConfig,
      androidSdpConfig: androidSdpConfig
    )
  }
  func toList() -> [Any?] {
    return [
      macSdpConfig,
      androidSdpConfig,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MacSdpConfig {
  var sdpPlistFile: String? = nil
  var data: [String: Any]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MacSdpConfig? {
    let sdpPlistFile: String? = nilOrValue(pigeonVar_list[0])
    let data: [String: Any]? = nilOrValue(pigeonVar_list[1])

    return MacSdpConfig(
      sdpPlistFile: sdpPlistFile,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      sdpPlistFile,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AndroidSdpConfig {
  var name: String
  var description: String
  var provider: String
  var subclass: Int64
  var descriptors: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AndroidSdpConfig? {
    let name = pigeonVar_list[0] as! String
    let description = pigeonVar_list[1] as! String
    let provider = pigeonVar_list[2] as! String
    let subclass = pigeonVar_list[3] as! Int64
    let descriptors = pigeonVar_list[4] as! FlutterStandardTypedData

    return AndroidSdpConfig(
      name: name,
      description: description,
      provider: provider,
      subclass: subclass,
      descriptors: descriptors
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      description,
      provider,
      subclass,
      descriptors,
    ]
  }
}

private class BluetoothHidManagerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return SdpConfig.fromList(self.readValue() as! [Any?])
    case 130:
      return MacSdpConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return AndroidSdpConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class BluetoothHidManagerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SdpConfig {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MacSdpConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidSdpConfig {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BluetoothHidManagerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BluetoothHidManagerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BluetoothHidManagerPigeonCodecWriter(data: data)
  }
}

class BluetoothHidManagerPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = BluetoothHidManagerPigeonCodec(readerWriter: BluetoothHidManagerPigeonCodecReaderWriter())
}


/// Flutter -> Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BluetoothHidManagerPlatformChannel {
  func setupSdp(config: SdpConfig) throws
  func connect(deviceId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func disconnect(deviceId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func sendReport(deviceId: String, data: FlutterStandardTypedData) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BluetoothHidManagerPlatformChannelSetup {
  static var codec: FlutterStandardMessageCodec { BluetoothHidManagerPigeonCodec.shared }
  /// Sets up an instance of `BluetoothHidManagerPlatformChannel` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BluetoothHidManagerPlatformChannel?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setupSdpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.setupSdp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setupSdpChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! SdpConfig
        do {
          try api.setupSdp(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setupSdpChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        api.connect(deviceId: deviceIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        api.disconnect(deviceId: deviceIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let sendReportChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.sendReport\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendReportChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        do {
          try api.sendReport(deviceId: deviceIdArg, data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendReportChannel.setMessageHandler(nil)
    }
  }
}
