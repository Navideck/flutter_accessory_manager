// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct BluetoothDevice {
  var address: String
  var name: String? = nil
  var paired: Bool
  var rssi: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BluetoothDevice? {
    let address = pigeonVar_list[0] as! String
    let name: String? = nilOrValue(pigeonVar_list[1])
    let paired = pigeonVar_list[2] as! Bool
    let rssi = pigeonVar_list[3] as! Int64

    return BluetoothDevice(
      address: address,
      name: name,
      paired: paired,
      rssi: rssi
    )
  }
  func toList() -> [Any?] {
    return [
      address,
      name,
      paired,
      rssi,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SdpConfig {
  var macSdpConfig: MacSdpConfig? = nil
  var androidSdpConfig: AndroidSdpConfig? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SdpConfig? {
    let macSdpConfig: MacSdpConfig? = nilOrValue(pigeonVar_list[0])
    let androidSdpConfig: AndroidSdpConfig? = nilOrValue(pigeonVar_list[1])

    return SdpConfig(
      macSdpConfig: macSdpConfig,
      androidSdpConfig: androidSdpConfig
    )
  }
  func toList() -> [Any?] {
    return [
      macSdpConfig,
      androidSdpConfig,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MacSdpConfig {
  var sdpPlistFile: String? = nil
  var data: [String: Any]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MacSdpConfig? {
    let sdpPlistFile: String? = nilOrValue(pigeonVar_list[0])
    let data: [String: Any]? = nilOrValue(pigeonVar_list[1])

    return MacSdpConfig(
      sdpPlistFile: sdpPlistFile,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      sdpPlistFile,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AndroidSdpConfig {
  var name: String
  var description: String
  var provider: String
  var subclass: Int64
  var descriptors: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AndroidSdpConfig? {
    let name = pigeonVar_list[0] as! String
    let description = pigeonVar_list[1] as! String
    let provider = pigeonVar_list[2] as! String
    let subclass = pigeonVar_list[3] as! Int64
    let descriptors = pigeonVar_list[4] as! FlutterStandardTypedData

    return AndroidSdpConfig(
      name: name,
      description: description,
      provider: provider,
      subclass: subclass,
      descriptors: descriptors
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      description,
      provider,
      subclass,
      descriptors,
    ]
  }
}

private class FlutterAccessoryManagerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return BluetoothDevice.fromList(self.readValue() as! [Any?])
    case 130:
      return SdpConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return MacSdpConfig.fromList(self.readValue() as! [Any?])
    case 132:
      return AndroidSdpConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterAccessoryManagerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BluetoothDevice {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SdpConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? MacSdpConfig {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidSdpConfig {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterAccessoryManagerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterAccessoryManagerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterAccessoryManagerPigeonCodecWriter(data: data)
  }
}

class FlutterAccessoryManagerPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FlutterAccessoryManagerPigeonCodec(readerWriter: FlutterAccessoryManagerPigeonCodecReaderWriter())
}


/// Flutter -> Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterAccessoryPlatformChannel {
  func showBluetoothAccessoryPicker(withNames: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func connect(deviceId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func disconnect(deviceId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func setupSdp(config: SdpConfig) throws
  func sendReport(deviceId: String, data: FlutterStandardTypedData) throws
  func startScan() throws
  func stopScan() throws
  func isScanning() throws -> Bool
  func getPairedDevices() throws -> [BluetoothDevice]
  func pair(address: String, completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterAccessoryPlatformChannelSetup {
  static var codec: FlutterStandardMessageCodec { FlutterAccessoryManagerPigeonCodec.shared }
  /// Sets up an instance of `FlutterAccessoryPlatformChannel` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterAccessoryPlatformChannel?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let showBluetoothAccessoryPickerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showBluetoothAccessoryPickerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let withNamesArg = args[0] as! [String]
        api.showBluetoothAccessoryPicker(withNames: withNamesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      showBluetoothAccessoryPickerChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        api.connect(deviceId: deviceIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        api.disconnect(deviceId: deviceIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let setupSdpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.setupSdp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setupSdpChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! SdpConfig
        do {
          try api.setupSdp(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setupSdpChannel.setMessageHandler(nil)
    }
    let sendReportChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.sendReport\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendReportChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        do {
          try api.sendReport(deviceId: deviceIdArg, data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendReportChannel.setMessageHandler(nil)
    }
    let startScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.startScan\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanChannel.setMessageHandler { _, reply in
        do {
          try api.startScan()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startScanChannel.setMessageHandler(nil)
    }
    let stopScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.stopScan\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanChannel.setMessageHandler { _, reply in
        do {
          try api.stopScan()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopScanChannel.setMessageHandler(nil)
    }
    let isScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.isScanning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isScanningChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isScanning()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isScanningChannel.setMessageHandler(nil)
    }
    let getPairedDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.getPairedDevices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPairedDevicesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPairedDevices()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPairedDevicesChannel.setMessageHandler(nil)
    }
    let pairChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.pair\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pairChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let addressArg = args[0] as! String
        api.pair(address: addressArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pairChannel.setMessageHandler(nil)
    }
  }
}
/// Native -> Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterAccessoryCallbackChannelProtocol {
  func onDeviceDiscover(device deviceArg: BluetoothDevice, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDeviceRemoved(device deviceArg: BluetoothDevice, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class FlutterAccessoryCallbackChannel: FlutterAccessoryCallbackChannelProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterAccessoryManagerPigeonCodec {
    return FlutterAccessoryManagerPigeonCodec.shared
  }
  func onDeviceDiscover(device deviceArg: BluetoothDevice, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.onDeviceDiscover\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onDeviceRemoved(device deviceArg: BluetoothDevice, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.onDeviceRemoved\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
