// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "FlutterAccessoryManager.g.h"

struct _FlutterAccessoryManagerBluetoothDevice {
  GObject parent_instance;

  gchar* address;
  gchar* name;
  gboolean paired;
  int64_t rssi;
};

G_DEFINE_TYPE(FlutterAccessoryManagerBluetoothDevice, flutter_accessory_manager_bluetooth_device, G_TYPE_OBJECT)

static void flutter_accessory_manager_bluetooth_device_dispose(GObject* object) {
  FlutterAccessoryManagerBluetoothDevice* self = FLUTTER_ACCESSORY_MANAGER_BLUETOOTH_DEVICE(object);
  g_clear_pointer(&self->address, g_free);
  g_clear_pointer(&self->name, g_free);
  G_OBJECT_CLASS(flutter_accessory_manager_bluetooth_device_parent_class)->dispose(object);
}

static void flutter_accessory_manager_bluetooth_device_init(FlutterAccessoryManagerBluetoothDevice* self) {
}

static void flutter_accessory_manager_bluetooth_device_class_init(FlutterAccessoryManagerBluetoothDeviceClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_bluetooth_device_dispose;
}

FlutterAccessoryManagerBluetoothDevice* flutter_accessory_manager_bluetooth_device_new(const gchar* address, const gchar* name, gboolean paired, int64_t rssi) {
  FlutterAccessoryManagerBluetoothDevice* self = FLUTTER_ACCESSORY_MANAGER_BLUETOOTH_DEVICE(g_object_new(flutter_accessory_manager_bluetooth_device_get_type(), nullptr));
  self->address = g_strdup(address);
  if (name != nullptr) {
    self->name = g_strdup(name);
  }
  else {
    self->name = nullptr;
  }
  self->paired = paired;
  self->rssi = rssi;
  return self;
}

const gchar* flutter_accessory_manager_bluetooth_device_get_address(FlutterAccessoryManagerBluetoothDevice* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_BLUETOOTH_DEVICE(self), nullptr);
  return self->address;
}

const gchar* flutter_accessory_manager_bluetooth_device_get_name(FlutterAccessoryManagerBluetoothDevice* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_BLUETOOTH_DEVICE(self), nullptr);
  return self->name;
}

gboolean flutter_accessory_manager_bluetooth_device_get_paired(FlutterAccessoryManagerBluetoothDevice* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_BLUETOOTH_DEVICE(self), FALSE);
  return self->paired;
}

int64_t flutter_accessory_manager_bluetooth_device_get_rssi(FlutterAccessoryManagerBluetoothDevice* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_BLUETOOTH_DEVICE(self), 0);
  return self->rssi;
}

static FlValue* flutter_accessory_manager_bluetooth_device_to_list(FlutterAccessoryManagerBluetoothDevice* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_string(self->address));
  fl_value_append_take(values, self->name != nullptr ? fl_value_new_string(self->name) : fl_value_new_null());
  fl_value_append_take(values, fl_value_new_bool(self->paired));
  fl_value_append_take(values, fl_value_new_int(self->rssi));
  return values;
}

static FlutterAccessoryManagerBluetoothDevice* flutter_accessory_manager_bluetooth_device_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const gchar* address = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  const gchar* name = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    name = fl_value_get_string(value1);
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  gboolean paired = fl_value_get_bool(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  int64_t rssi = fl_value_get_int(value3);
  return flutter_accessory_manager_bluetooth_device_new(address, name, paired, rssi);
}

struct _FlutterAccessoryManagerEAAccessoryObject {
  GObject parent_instance;

  gboolean is_connected;
  int64_t connection_i_d;
  gchar* manufacturer;
  gchar* name;
  gchar* model_number;
  gchar* serial_number;
  gchar* firmware_revision;
  gchar* hardware_revision;
  gchar* dock_type;
  FlValue* protocol_strings;
};

G_DEFINE_TYPE(FlutterAccessoryManagerEAAccessoryObject, flutter_accessory_manager_e_a_accessory_object, G_TYPE_OBJECT)

static void flutter_accessory_manager_e_a_accessory_object_dispose(GObject* object) {
  FlutterAccessoryManagerEAAccessoryObject* self = FLUTTER_ACCESSORY_MANAGER_E_A_ACCESSORY_OBJECT(object);
  g_clear_pointer(&self->manufacturer, g_free);
  g_clear_pointer(&self->name, g_free);
  g_clear_pointer(&self->model_number, g_free);
  g_clear_pointer(&self->serial_number, g_free);
  g_clear_pointer(&self->firmware_revision, g_free);
  g_clear_pointer(&self->hardware_revision, g_free);
  g_clear_pointer(&self->dock_type, g_free);
  g_clear_pointer(&self->protocol_strings, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_e_a_accessory_object_parent_class)->dispose(object);
}

static void flutter_accessory_manager_e_a_accessory_object_init(FlutterAccessoryManagerEAAccessoryObject* self) {
}

static void flutter_accessory_manager_e_a_accessory_object_class_init(FlutterAccessoryManagerEAAccessoryObjectClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_e_a_accessory_object_dispose;
}

FlutterAccessoryManagerEAAccessoryObject* flutter_accessory_manager_e_a_accessory_object_new(gboolean is_connected, int64_t connection_i_d, const gchar* manufacturer, const gchar* name, const gchar* model_number, const gchar* serial_number, const gchar* firmware_revision, const gchar* hardware_revision, const gchar* dock_type, FlValue* protocol_strings) {
  FlutterAccessoryManagerEAAccessoryObject* self = FLUTTER_ACCESSORY_MANAGER_E_A_ACCESSORY_OBJECT(g_object_new(flutter_accessory_manager_e_a_accessory_object_get_type(), nullptr));
  self->is_connected = is_connected;
  self->connection_i_d = connection_i_d;
  self->manufacturer = g_strdup(manufacturer);
  self->name = g_strdup(name);
  self->model_number = g_strdup(model_number);
  self->serial_number = g_strdup(serial_number);
  self->firmware_revision = g_strdup(firmware_revision);
  self->hardware_revision = g_strdup(hardware_revision);
  self->dock_type = g_strdup(dock_type);
  self->protocol_strings = fl_value_ref(protocol_strings);
  return self;
}

gboolean flutter_accessory_manager_e_a_accessory_object_get_is_connected(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), FALSE);
  return self->is_connected;
}

int64_t flutter_accessory_manager_e_a_accessory_object_get_connection_i_d(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), 0);
  return self->connection_i_d;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_manufacturer(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->manufacturer;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_name(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->name;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_model_number(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->model_number;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_serial_number(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->serial_number;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_firmware_revision(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->firmware_revision;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_hardware_revision(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->hardware_revision;
}

const gchar* flutter_accessory_manager_e_a_accessory_object_get_dock_type(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->dock_type;
}

FlValue* flutter_accessory_manager_e_a_accessory_object_get_protocol_strings(FlutterAccessoryManagerEAAccessoryObject* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_E_A_ACCESSORY_OBJECT(self), nullptr);
  return self->protocol_strings;
}

static FlValue* flutter_accessory_manager_e_a_accessory_object_to_list(FlutterAccessoryManagerEAAccessoryObject* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->is_connected));
  fl_value_append_take(values, fl_value_new_int(self->connection_i_d));
  fl_value_append_take(values, fl_value_new_string(self->manufacturer));
  fl_value_append_take(values, fl_value_new_string(self->name));
  fl_value_append_take(values, fl_value_new_string(self->model_number));
  fl_value_append_take(values, fl_value_new_string(self->serial_number));
  fl_value_append_take(values, fl_value_new_string(self->firmware_revision));
  fl_value_append_take(values, fl_value_new_string(self->hardware_revision));
  fl_value_append_take(values, fl_value_new_string(self->dock_type));
  fl_value_append_take(values, fl_value_ref(self->protocol_strings));
  return values;
}

static FlutterAccessoryManagerEAAccessoryObject* flutter_accessory_manager_e_a_accessory_object_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean is_connected = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t connection_i_d = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  const gchar* manufacturer = fl_value_get_string(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  const gchar* name = fl_value_get_string(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const gchar* model_number = fl_value_get_string(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const gchar* serial_number = fl_value_get_string(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const gchar* firmware_revision = fl_value_get_string(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const gchar* hardware_revision = fl_value_get_string(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  const gchar* dock_type = fl_value_get_string(value8);
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* protocol_strings = value9;
  return flutter_accessory_manager_e_a_accessory_object_new(is_connected, connection_i_d, manufacturer, name, model_number, serial_number, firmware_revision, hardware_revision, dock_type, protocol_strings);
}

struct _FlutterAccessoryManagerMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(FlutterAccessoryManagerMessageCodec, flutter_accessory_manager_message_codec, fl_standard_message_codec_get_type())

static gboolean flutter_accessory_manager_message_codec_write_flutter_accessory_manager_bluetooth_device(FlStandardMessageCodec* codec, GByteArray* buffer, FlutterAccessoryManagerBluetoothDevice* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = flutter_accessory_manager_bluetooth_device_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean flutter_accessory_manager_message_codec_write_flutter_accessory_manager_e_a_accessory_object(FlStandardMessageCodec* codec, GByteArray* buffer, FlutterAccessoryManagerEAAccessoryObject* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = flutter_accessory_manager_e_a_accessory_object_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean flutter_accessory_manager_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return flutter_accessory_manager_message_codec_write_flutter_accessory_manager_bluetooth_device(codec, buffer, FLUTTER_ACCESSORY_MANAGER_BLUETOOTH_DEVICE(fl_value_get_custom_value_object(value)), error);
      case 130:
        return flutter_accessory_manager_message_codec_write_flutter_accessory_manager_e_a_accessory_object(codec, buffer, FLUTTER_ACCESSORY_MANAGER_E_A_ACCESSORY_OBJECT(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(flutter_accessory_manager_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* flutter_accessory_manager_message_codec_read_flutter_accessory_manager_bluetooth_device(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(FlutterAccessoryManagerBluetoothDevice) value = flutter_accessory_manager_bluetooth_device_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(129, G_OBJECT(value));
}

static FlValue* flutter_accessory_manager_message_codec_read_flutter_accessory_manager_e_a_accessory_object(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(FlutterAccessoryManagerEAAccessoryObject) value = flutter_accessory_manager_e_a_accessory_object_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(130, G_OBJECT(value));
}

static FlValue* flutter_accessory_manager_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return flutter_accessory_manager_message_codec_read_flutter_accessory_manager_bluetooth_device(codec, buffer, offset, error);
    case 130:
      return flutter_accessory_manager_message_codec_read_flutter_accessory_manager_e_a_accessory_object(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(flutter_accessory_manager_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void flutter_accessory_manager_message_codec_init(FlutterAccessoryManagerMessageCodec* self) {
}

static void flutter_accessory_manager_message_codec_class_init(FlutterAccessoryManagerMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = flutter_accessory_manager_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = flutter_accessory_manager_message_codec_read_value_of_type;
}

static FlutterAccessoryManagerMessageCodec* flutter_accessory_manager_message_codec_new() {
  FlutterAccessoryManagerMessageCodec* self = FLUTTER_ACCESSORY_MANAGER_MESSAGE_CODEC(g_object_new(flutter_accessory_manager_message_codec_get_type(), nullptr));
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle, flutter_accessory_manager_flutter_accessory_platform_channel_response_handle, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_new(FlBasicMessageChannel* channel, FlBasicMessageChannelResponseHandle* response_handle) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_RESPONSE_HANDLE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_get_type(), nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle = FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse, flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_SHOW_BLUETOOTH_ACCESSORY_PICKER_RESPONSE, GObject)

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse, flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_SHOW_BLUETOOTH_ACCESSORY_PICKER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_new() {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_SHOW_BLUETOOTH_ACCESSORY_PICKER_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_SHOW_BLUETOOTH_ACCESSORY_PICKER_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse, flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_CLOSE_EA_SESSION_RESPONSE, GObject)

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse, flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_CLOSE_EA_SESSION_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_new() {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_CLOSE_EA_SESSION_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_CLOSE_EA_SESSION_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse, flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_START_SCAN_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_dispose;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new() {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_START_SCAN_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_START_SCAN_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse, flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_STOP_SCAN_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_dispose;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new() {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_STOP_SCAN_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_STOP_SCAN_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse, flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_IS_SCANNING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_dispose;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new(gboolean return_value) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_IS_SCANNING_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_IS_SCANNING_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse, flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_GET_PAIRED_DEVICES_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_dispose;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new(FlValue* return_value) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_GET_PAIRED_DEVICES_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_GET_PAIRED_DEVICES_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse, flutter_accessory_manager_flutter_accessory_platform_channel_pair_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_PAIR_RESPONSE, GObject)

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse, flutter_accessory_manager_flutter_accessory_platform_channel_pair_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_PAIR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_new(gboolean return_value) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_PAIR_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL_PAIR_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryPlatformChannel {
  GObject parent_instance;

  const FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannel, flutter_accessory_manager_flutter_accessory_platform_channel, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_platform_channel_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_platform_channel_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self) {
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_class_init(FlutterAccessoryManagerFlutterAccessoryPlatformChannelClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_platform_channel_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryPlatformChannel* flutter_accessory_manager_flutter_accessory_platform_channel_new(const FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(g_object_new(flutter_accessory_manager_flutter_accessory_platform_channel_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->show_bluetooth_accessory_picker == nullptr) {
    return;
  }

  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle) handle = flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_new(channel, response_handle);
  self->vtable->show_bluetooth_accessory_picker(handle, self->user_data);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->close_ea_session == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* protocol_string = fl_value_get_string(value0);
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle) handle = flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_new(channel, response_handle);
  self->vtable->close_ea_session(protocol_string, handle, self->user_data);
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->start_scan == nullptr) {
    return;
  }

  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse) response = self->vtable->start_scan(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "FlutterAccessoryPlatformChannel", "startScan");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "startScan", error->message);
  }
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->stop_scan == nullptr) {
    return;
  }

  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse) response = self->vtable->stop_scan(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "FlutterAccessoryPlatformChannel", "stopScan");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "stopScan", error->message);
  }
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->is_scanning == nullptr) {
    return;
  }

  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse) response = self->vtable->is_scanning(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "FlutterAccessoryPlatformChannel", "isScanning");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "isScanning", error->message);
  }
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->get_paired_devices == nullptr) {
    return;
  }

  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse) response = self->vtable->get_paired_devices(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "FlutterAccessoryPlatformChannel", "getPairedDevices");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "getPairedDevices", error->message);
  }
}

static void flutter_accessory_manager_flutter_accessory_platform_channel_pair_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  FlutterAccessoryManagerFlutterAccessoryPlatformChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_PLATFORM_CHANNEL(user_data);

  if (self->vtable == nullptr || self->vtable->pair == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* address = fl_value_get_string(value0);
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle) handle = flutter_accessory_manager_flutter_accessory_platform_channel_response_handle_new(channel, response_handle);
  self->vtable->pair(address, handle, self->user_data);
}

void flutter_accessory_manager_flutter_accessory_platform_channel_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannel) api_data = flutter_accessory_manager_flutter_accessory_platform_channel_new(vtable, user_data, user_data_free_func);

  g_autoptr(FlutterAccessoryManagerMessageCodec) codec = flutter_accessory_manager_message_codec_new();
  g_autofree gchar* show_bluetooth_accessory_picker_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) show_bluetooth_accessory_picker_channel = fl_basic_message_channel_new(messenger, show_bluetooth_accessory_picker_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(show_bluetooth_accessory_picker_channel, flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* close_ea_session_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.closeEaSession%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) close_ea_session_channel = fl_basic_message_channel_new(messenger, close_ea_session_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(close_ea_session_channel, flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* start_scan_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.startScan%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) start_scan_channel = fl_basic_message_channel_new(messenger, start_scan_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(start_scan_channel, flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* stop_scan_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.stopScan%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) stop_scan_channel = fl_basic_message_channel_new(messenger, stop_scan_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(stop_scan_channel, flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* is_scanning_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.isScanning%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) is_scanning_channel = fl_basic_message_channel_new(messenger, is_scanning_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(is_scanning_channel, flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* get_paired_devices_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.getPairedDevices%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_paired_devices_channel = fl_basic_message_channel_new(messenger, get_paired_devices_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_paired_devices_channel, flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* pair_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.pair%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) pair_channel = fl_basic_message_channel_new(messenger, pair_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(pair_channel, flutter_accessory_manager_flutter_accessory_platform_channel_pair_cb, g_object_ref(api_data), g_object_unref);
}

void flutter_accessory_manager_flutter_accessory_platform_channel_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(FlutterAccessoryManagerMessageCodec) codec = flutter_accessory_manager_message_codec_new();
  g_autofree gchar* show_bluetooth_accessory_picker_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) show_bluetooth_accessory_picker_channel = fl_basic_message_channel_new(messenger, show_bluetooth_accessory_picker_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(show_bluetooth_accessory_picker_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* close_ea_session_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.closeEaSession%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) close_ea_session_channel = fl_basic_message_channel_new(messenger, close_ea_session_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(close_ea_session_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* start_scan_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.startScan%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) start_scan_channel = fl_basic_message_channel_new(messenger, start_scan_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(start_scan_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* stop_scan_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.stopScan%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) stop_scan_channel = fl_basic_message_channel_new(messenger, stop_scan_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(stop_scan_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* is_scanning_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.isScanning%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) is_scanning_channel = fl_basic_message_channel_new(messenger, is_scanning_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(is_scanning_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* get_paired_devices_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.getPairedDevices%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_paired_devices_channel = fl_basic_message_channel_new(messenger, get_paired_devices_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_paired_devices_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* pair_channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryPlatformChannel.pair%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) pair_channel = fl_basic_message_channel_new(messenger, pair_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(pair_channel, nullptr, nullptr, nullptr);
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_show_bluetooth_accessory_picker(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "showBluetoothAccessoryPicker", error->message);
  }
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_show_bluetooth_accessory_picker(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelShowBluetoothAccessoryPickerResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_show_bluetooth_accessory_picker_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "showBluetoothAccessoryPicker", error->message);
  }
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_close_ea_session(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "closeEaSession", error->message);
  }
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_close_ea_session(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelCloseEaSessionResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_close_ea_session_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "closeEaSession", error->message);
  }
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_pair(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, gboolean return_value) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "pair", error->message);
  }
}

void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_pair(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(FlutterAccessoryManagerFlutterAccessoryPlatformChannelPairResponse) response = flutter_accessory_manager_flutter_accessory_platform_channel_pair_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "FlutterAccessoryPlatformChannel", "pair", error->message);
  }
}

struct _FlutterAccessoryManagerFlutterAccessoryCallbackChannel {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar *suffix;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannel, flutter_accessory_manager_flutter_accessory_callback_channel, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_callback_channel_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_callback_channel_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self) {
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_class_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_callback_channel_dispose;
}

FlutterAccessoryManagerFlutterAccessoryCallbackChannel* flutter_accessory_manager_flutter_accessory_callback_channel_new(FlBinaryMessenger* messenger, const gchar* suffix) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL(g_object_new(flutter_accessory_manager_flutter_accessory_callback_channel_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_class_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_new(FlValue* response) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, FlutterAccessoryManagerEAAccessoryObject* accessory, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(130, G_OBJECT(accessory)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.accessoryConnected%s", self->suffix);
  g_autoptr(FlutterAccessoryManagerMessageCodec) codec = flutter_accessory_manager_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_cb, task);
}

FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_new(response);
}

struct _FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_class_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_new(FlValue* response) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, FlutterAccessoryManagerEAAccessoryObject* accessory, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(130, G_OBJECT(accessory)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.accessoryDisconnected%s", self->suffix);
  g_autoptr(FlutterAccessoryManagerMessageCodec) codec = flutter_accessory_manager_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_cb, task);
}

FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_new(response);
}

struct _FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse, flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response, G_TYPE_OBJECT)

static void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_dispose(GObject* object) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_parent_class)->dispose(object);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self) {
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_class_init(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_dispose;
}

static FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_new(FlValue* response) {
  FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self = FLUTTER_ACCESSORY_MANAGER_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(g_object_new(flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* self) {
  g_return_val_if_fail(FLUTTER_ACCESSORY_MANAGER_IS_FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE(self), nullptr);
  g_assert(flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, FlutterAccessoryManagerBluetoothDevice* device, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(129, G_OBJECT(device)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.flutter_accessory_manager.FlutterAccessoryCallbackChannel.onDeviceDiscover%s", self->suffix);
  g_autoptr(FlutterAccessoryManagerMessageCodec) codec = flutter_accessory_manager_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_cb, task);
}

FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_new(response);
}
