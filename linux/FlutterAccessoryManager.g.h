// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_FLUTTERACCESSORYMANAGER_G_H_
#define PIGEON_FLUTTERACCESSORYMANAGER_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

/**
 * FlutterAccessoryManagerBluetoothDevice:
 *
 */

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerBluetoothDevice, flutter_accessory_manager_bluetooth_device, FLUTTER_ACCESSORY_MANAGER, BLUETOOTH_DEVICE, GObject)

/**
 * flutter_accessory_manager_bluetooth_device_new:
 * address: field in this object.
 * name: field in this object.
 * paired: field in this object.
 * rssi: field in this object.
 *
 * Creates a new #BluetoothDevice object.
 *
 * Returns: a new #FlutterAccessoryManagerBluetoothDevice
 */
FlutterAccessoryManagerBluetoothDevice* flutter_accessory_manager_bluetooth_device_new(const gchar* address, const gchar* name, gboolean paired, int64_t rssi);

/**
 * flutter_accessory_manager_bluetooth_device_get_address
 * @object: a #FlutterAccessoryManagerBluetoothDevice.
 *
 * Gets the value of the address field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_bluetooth_device_get_address(FlutterAccessoryManagerBluetoothDevice* object);

/**
 * flutter_accessory_manager_bluetooth_device_get_name
 * @object: a #FlutterAccessoryManagerBluetoothDevice.
 *
 * Gets the value of the name field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_bluetooth_device_get_name(FlutterAccessoryManagerBluetoothDevice* object);

/**
 * flutter_accessory_manager_bluetooth_device_get_paired
 * @object: a #FlutterAccessoryManagerBluetoothDevice.
 *
 * Gets the value of the paired field of @object.
 *
 * Returns: the field value.
 */
gboolean flutter_accessory_manager_bluetooth_device_get_paired(FlutterAccessoryManagerBluetoothDevice* object);

/**
 * flutter_accessory_manager_bluetooth_device_get_rssi
 * @object: a #FlutterAccessoryManagerBluetoothDevice.
 *
 * Gets the value of the rssi field of @object.
 *
 * Returns: the field value.
 */
int64_t flutter_accessory_manager_bluetooth_device_get_rssi(FlutterAccessoryManagerBluetoothDevice* object);

/**
 * FlutterAccessoryManagerEAAccessoryObject:
 *
 */

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerEAAccessoryObject, flutter_accessory_manager_e_a_accessory_object, FLUTTER_ACCESSORY_MANAGER, E_A_ACCESSORY_OBJECT, GObject)

/**
 * flutter_accessory_manager_e_a_accessory_object_new:
 * is_connected: field in this object.
 * connection_i_d: field in this object.
 * manufacturer: field in this object.
 * name: field in this object.
 * model_number: field in this object.
 * serial_number: field in this object.
 * firmware_revision: field in this object.
 * hardware_revision: field in this object.
 * dock_type: field in this object.
 * protocol_strings: field in this object.
 *
 * Creates a new #EAAccessoryObject object.
 *
 * Returns: a new #FlutterAccessoryManagerEAAccessoryObject
 */
FlutterAccessoryManagerEAAccessoryObject* flutter_accessory_manager_e_a_accessory_object_new(gboolean is_connected, int64_t connection_i_d, const gchar* manufacturer, const gchar* name, const gchar* model_number, const gchar* serial_number, const gchar* firmware_revision, const gchar* hardware_revision, const gchar* dock_type, FlValue* protocol_strings);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_is_connected
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the isConnected field of @object.
 *
 * Returns: the field value.
 */
gboolean flutter_accessory_manager_e_a_accessory_object_get_is_connected(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_connection_i_d
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the connectionID field of @object.
 *
 * Returns: the field value.
 */
int64_t flutter_accessory_manager_e_a_accessory_object_get_connection_i_d(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_manufacturer
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the manufacturer field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_manufacturer(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_name
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the name field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_name(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_model_number
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the modelNumber field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_model_number(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_serial_number
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the serialNumber field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_serial_number(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_firmware_revision
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the firmwareRevision field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_firmware_revision(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_hardware_revision
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the hardwareRevision field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_hardware_revision(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_dock_type
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the dockType field of @object.
 *
 * Returns: the field value.
 */
const gchar* flutter_accessory_manager_e_a_accessory_object_get_dock_type(FlutterAccessoryManagerEAAccessoryObject* object);

/**
 * flutter_accessory_manager_e_a_accessory_object_get_protocol_strings
 * @object: a #FlutterAccessoryManagerEAAccessoryObject.
 *
 * Gets the value of the protocolStrings field of @object.
 *
 * Returns: the field value.
 */
FlValue* flutter_accessory_manager_e_a_accessory_object_get_protocol_strings(FlutterAccessoryManagerEAAccessoryObject* object);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerMessageCodec, flutter_accessory_manager_message_codec, FLUTTER_ACCESSORY_MANAGER, MESSAGE_CODEC, FlStandardMessageCodec)

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannel, flutter_accessory_manager_flutter_accessory_platform_channel, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL, GObject)

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle, flutter_accessory_manager_flutter_accessory_platform_channel_response_handle, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_RESPONSE_HANDLE, GObject)

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse, flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_START_SCAN_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new:
 *
 * Creates a new response to FlutterAccessoryPlatformChannel.startScan.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new();

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to FlutterAccessoryPlatformChannel.startScan.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_start_scan_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse, flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_STOP_SCAN_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new:
 *
 * Creates a new response to FlutterAccessoryPlatformChannel.stopScan.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new();

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to FlutterAccessoryPlatformChannel.stopScan.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* flutter_accessory_manager_flutter_accessory_platform_channel_stop_scan_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse, flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_IS_SCANNING_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new:
 *
 * Creates a new response to FlutterAccessoryPlatformChannel.isScanning.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new(gboolean return_value);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to FlutterAccessoryPlatformChannel.isScanning.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* flutter_accessory_manager_flutter_accessory_platform_channel_is_scanning_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse, flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_PLATFORM_CHANNEL_GET_PAIRED_DEVICES_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new:
 *
 * Creates a new response to FlutterAccessoryPlatformChannel.getPairedDevices.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new(FlValue* return_value);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to FlutterAccessoryPlatformChannel.getPairedDevices.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse
 */
FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* flutter_accessory_manager_flutter_accessory_platform_channel_get_paired_devices_response_new_error(const gchar* code, const gchar* message, FlValue* details);

/**
 * FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable:
 *
 * Table of functions exposed by FlutterAccessoryPlatformChannel to be implemented by the API provider.
 */
typedef struct {
  void (*show_bluetooth_accessory_picker)(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, gpointer user_data);
  void (*close_ea_session)(const gchar* protocol_string, FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, gpointer user_data);
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStartScanResponse* (*start_scan)(gpointer user_data);
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelStopScanResponse* (*stop_scan)(gpointer user_data);
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelIsScanningResponse* (*is_scanning)(gpointer user_data);
  FlutterAccessoryManagerFlutterAccessoryPlatformChannelGetPairedDevicesResponse* (*get_paired_devices)(gpointer user_data);
  void (*pair)(const gchar* address, FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, gpointer user_data);
} FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable;

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_set_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 * @vtable: implementations of the methods in this API.
 * @user_data: (closure): user data to pass to the functions in @vtable.
 * @user_data_free_func: (allow-none): a function which gets called to free @user_data, or %NULL.
 *
 * Connects the method handlers in the FlutterAccessoryPlatformChannel API.
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const FlutterAccessoryManagerFlutterAccessoryPlatformChannelVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_clear_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Clears the method handlers in the FlutterAccessoryPlatformChannel API.
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_show_bluetooth_accessory_picker:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 *
 * Responds to FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_show_bluetooth_accessory_picker(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_show_bluetooth_accessory_picker:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to FlutterAccessoryPlatformChannel.showBluetoothAccessoryPicker. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_show_bluetooth_accessory_picker(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_close_ea_session:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 *
 * Responds to FlutterAccessoryPlatformChannel.closeEaSession. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_close_ea_session(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_close_ea_session:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to FlutterAccessoryPlatformChannel.closeEaSession. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_close_ea_session(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_pair:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to FlutterAccessoryPlatformChannel.pair. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_pair(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, gboolean return_value);

/**
 * flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_pair:
 * @response_handle: a #FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to FlutterAccessoryPlatformChannel.pair. 
 */
void flutter_accessory_manager_flutter_accessory_platform_channel_respond_error_pair(FlutterAccessoryManagerFlutterAccessoryPlatformChannelResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_CONNECTED_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse.
 *
 * Checks if a response to FlutterAccessoryCallbackChannel.accessoryConnected is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_code:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_message:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_details:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* response);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse, flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ACCESSORY_DISCONNECTED_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse.
 *
 * Checks if a response to FlutterAccessoryCallbackChannel.accessoryDisconnected is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_code:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_message:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_details:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* response);

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse, flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_CALLBACK_CHANNEL_ON_DEVICE_DISCOVER_RESPONSE, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse.
 *
 * Checks if a response to FlutterAccessoryCallbackChannel.onDeviceDiscover is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_is_error(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_code:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_code(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_message:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_message(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* response);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_details:
 * @response: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_response_get_error_details(FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* response);

/**
 * FlutterAccessoryManagerFlutterAccessoryCallbackChannel:
 *
 * Native -> Flutter
 */

G_DECLARE_FINAL_TYPE(FlutterAccessoryManagerFlutterAccessoryCallbackChannel, flutter_accessory_manager_flutter_accessory_callback_channel, FLUTTER_ACCESSORY_MANAGER, FLUTTER_ACCESSORY_CALLBACK_CHANNEL, GObject)

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_new:
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Creates a new object to access the FlutterAccessoryCallbackChannel API.
 *
 * Returns: a new #FlutterAccessoryManagerFlutterAccessoryCallbackChannel
 */
FlutterAccessoryManagerFlutterAccessoryCallbackChannel* flutter_accessory_manager_flutter_accessory_callback_channel_new(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @accessory: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 */
void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, FlutterAccessoryManagerEAAccessoryObject* accessory, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_finish:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected() call.
 *
 * Returns: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse or %NULL on error.
 */
FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryConnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_connected_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, GAsyncResult* result, GError** error);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @accessory: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 */
void flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, FlutterAccessoryManagerEAAccessoryObject* accessory, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_finish:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected() call.
 *
 * Returns: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse or %NULL on error.
 */
FlutterAccessoryManagerFlutterAccessoryCallbackChannelAccessoryDisconnectedResponse* flutter_accessory_manager_flutter_accessory_callback_channel_accessory_disconnected_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, GAsyncResult* result, GError** error);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @device: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 */
void flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, FlutterAccessoryManagerBluetoothDevice* device, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_finish:
 * @api: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannel.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover() call.
 *
 * Returns: a #FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse or %NULL on error.
 */
FlutterAccessoryManagerFlutterAccessoryCallbackChannelOnDeviceDiscoverResponse* flutter_accessory_manager_flutter_accessory_callback_channel_on_device_discover_finish(FlutterAccessoryManagerFlutterAccessoryCallbackChannel* api, GAsyncResult* result, GError** error);

G_END_DECLS

#endif  // PIGEON_FLUTTERACCESSORYMANAGER_G_H_
