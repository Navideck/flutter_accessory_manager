// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class SdpConfig {
  SdpConfig({
    this.macSdpConfig,
    this.androidSdpConfig,
  });

  MacSdpConfig? macSdpConfig;

  AndroidSdpConfig? androidSdpConfig;

  Object encode() {
    return <Object?>[
      macSdpConfig,
      androidSdpConfig,
    ];
  }

  static SdpConfig decode(Object result) {
    result as List<Object?>;
    return SdpConfig(
      macSdpConfig: result[0] as MacSdpConfig?,
      androidSdpConfig: result[1] as AndroidSdpConfig?,
    );
  }
}

class MacSdpConfig {
  MacSdpConfig({
    this.sdpPlistFile,
    this.data,
  });

  String? sdpPlistFile;

  Map<String, Object>? data;

  Object encode() {
    return <Object?>[
      sdpPlistFile,
      data,
    ];
  }

  static MacSdpConfig decode(Object result) {
    result as List<Object?>;
    return MacSdpConfig(
      sdpPlistFile: result[0] as String?,
      data: (result[1] as Map<Object?, Object?>?)?.cast<String, Object>(),
    );
  }
}

class AndroidSdpConfig {
  AndroidSdpConfig({
    required this.name,
    required this.description,
    required this.provider,
    required this.subclass,
    required this.descriptors,
  });

  String name;

  String description;

  String provider;

  int subclass;

  Uint8List descriptors;

  Object encode() {
    return <Object?>[
      name,
      description,
      provider,
      subclass,
      descriptors,
    ];
  }

  static AndroidSdpConfig decode(Object result) {
    result as List<Object?>;
    return AndroidSdpConfig(
      name: result[0]! as String,
      description: result[1]! as String,
      provider: result[2]! as String,
      subclass: result[3]! as int,
      descriptors: result[4]! as Uint8List,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is SdpConfig) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is MacSdpConfig) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidSdpConfig) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return SdpConfig.decode(readValue(buffer)!);
      case 130: 
        return MacSdpConfig.decode(readValue(buffer)!);
      case 131: 
        return AndroidSdpConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Flutter -> Native
class BluetoothHidManagerPlatformChannel {
  /// Constructor for [BluetoothHidManagerPlatformChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BluetoothHidManagerPlatformChannel({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setupSdp(SdpConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.setupSdp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.connect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendReport(String deviceId, Uint8List data) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_accessory_manager.BluetoothHidManagerPlatformChannel.sendReport$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceId, data]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
